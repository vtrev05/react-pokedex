{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","pokemonName","setPokemon","pokemonChosen","setPokemonChosen","name","number","species","image","hp","attack","defense","speed","type","pokemon","setPokemonInfo","className","onChange","event","target","value","toLowerCase","onClick","axios","get","then","res","data","id","sprites","front_default","stats","base_stat","types","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAyEeA,EArEH,WACV,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAkCJ,mBAAS,CACzCK,KAAM,GACNC,OAAQ,GACRC,QAAS,GACTC,MAAO,GACPC,GAAI,GACJC,OAAQ,GACRC,QAAS,GACTC,MAAO,GACPC,KAAM,KATR,mBAAOC,EAAP,KAAgBC,EAAhB,KA8BA,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,eAAf,UACE,4CACA,uBACEH,KAAK,OACLI,SAAU,SAACC,GACThB,EAAWgB,EAAMC,OAAOC,QAE1BA,MAAOnB,EAAYoB,gBAErB,8BACGpB,GAAe,wBAAQqB,QA9BV,WACpBC,IAAMC,IAAN,4CAA+CvB,IAAewB,MAC5D,SAACC,GACCX,EAAe,CACbV,KAAMJ,EACNK,OAAQoB,EAAIC,KAAKC,GACjBrB,QAASmB,EAAIC,KAAKpB,QAAQF,KAC1BG,MAAOkB,EAAIC,KAAKE,QAAQC,cACxBrB,GAAIiB,EAAIC,KAAKI,MAAM,GAAGC,UACtBtB,OAAQgB,EAAIC,KAAKI,MAAM,GAAGC,UAC1BrB,QAASe,EAAIC,KAAKI,MAAM,GAAGC,UAC3BpB,MAAOc,EAAIC,KAAKI,MAAM,GAAGC,UAC9BnB,KAAMa,EAAIC,KAAKM,MAAM,GAAGpB,KAAKR,OAE1BD,GAAiB,OAgBC,oCAGpB,qBAAKY,UAAU,OAAf,SACIb,EAGA,qCACE,6BAAKW,EAAQT,OACb,qBAAK6B,IAAKpB,EAAQN,MAAO2B,IAAKrB,EAAQT,OACtC,0CAAY,qCAAQS,EAAQR,UAA5B,OACA,2CAAa,+BAAOQ,EAAQP,UAA5B,OACA,wCAAU,+BAAOO,EAAQD,OAAzB,OACA,sCAAQ,+BAAOC,EAAQL,KAAvB,OACA,0CAAY,+BAAOK,EAAQJ,SAA3B,OACA,2CAAa,+BAAOI,EAAQH,UAA5B,OACA,yCAAW,+BAAOG,EAAQF,QAA1B,UAXF,oEC1CKwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2ed32011.chunk.js","sourcesContent":["import './App.css';\nimport axios from \"axios\";\nimport {useState} from \"react\";\n\nconst App = () => {\n  const [pokemonName, setPokemon] = useState('');\n  const [pokemonChosen, setPokemonChosen] = useState(false);\n  const [pokemon, setPokemonInfo] = useState({\n    name: \"\",\n    number: \"\",\n    species: \"\",\n    image: \"\",\n    hp: \"\",\n    attack: \"\",\n    defense: \"\",\n    speed: \"\",\n    type: \"\",\n  });\n\n  const searchPokemon = () => {\n    axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`).then(\n      (res) => {\n        setPokemonInfo({\n          name: pokemonName,\n          number: res.data.id,\n          species: res.data.species.name,\n          image: res.data.sprites.front_default,\n          hp: res.data.stats[0].base_stat,\n          attack: res.data.stats[1].base_stat,\n          defense: res.data.stats[2].base_stat,\n          speed: res.data.stats[5].base_stat,\n\t\t\t\t\ttype: res.data.types[0].type.name,\n        });\n        setPokemonChosen(true);\n      }\n    );\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"TitleSection\">\n        <h1>Pokédex</h1>\n        <input\n          type=\"text\"\n          onChange={(event) => {\n            setPokemon(event.target.value);\n          }}\n          value={pokemonName.toLowerCase()}\n        />\n        <div>\n          {pokemonName && <button onClick={searchPokemon}>Search Pokémon</button>}\n        </div>\n      </div>\n      <div className=\"card\">\n        {!pokemonChosen ? (\n          <h1> Please choose a Pokémon </h1>\n        ) : (\n          <>\n            <h1>{pokemon.name}</h1>\n            <img src={pokemon.image} alt={pokemon.name} />\n            <h3>Number: <span>#{pokemon.number}</span> </h3>\n            <h3>Species: <span>{pokemon.species}</span> </h3>\n            <h3>Type: <span>{pokemon.type}</span> </h3>\n            <h3>Hp: <span>{pokemon.hp}</span> </h3>\n            <h3>Attack: <span>{pokemon.attack}</span> </h3>\n            <h3>Defense: <span>{pokemon.defense}</span> </h3>\n            <h3>Speed: <span>{pokemon.speed}</span> </h3>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}